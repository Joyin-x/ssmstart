<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace 这里不是实体类名称，而是映射接口的全路径！！！-->
<mapper namespace="com.demo.dao.departmentMapper">

    <!--增加部门-->
    <insert id="addDepartment" parameterType="Department">
        insert into department(employee_id,department_name,principal,established_time,description)
        values(#{employeeId},#{departmentName},#{principal},#{establishedTime},#{description})
    </insert>

    <!--根据负责人id查找部门id-->
    <select id="getDepartmentID" parameterType="int" resultType="int">
        select id from department where employee_id=#{id}
    </select>


    <!--修改部门-->
    <update id="modifyDepartment" parameterType="Department">
        update department
        <set>
            <if test="departmentName!= null and departmentName!=''">department_name=#{departmentName},</if>
            <if test="principal!= null and principal!=''">principal=#{principal}</if>
        </set>
        where id=#{id}
    </update>

    <!--查询要删除部门的所有员工id-->
    <select id="getDeleteDepartmentEmployee" parameterType="int" resultType="java.lang.Integer">
        select id from employee where department_id=#{id}
    </select>
    <!--删除部门-->
    <delete id="deleteDepartment" parameterType="int">
        delete from department where id=#{id};
        delete from employee where department_id=#{id}
    </delete>
    <!--删除部门时删除该部门所有员工-->
    <delete id="deleteDepartmentAllEmployee" parameterType="java.util.List">
        delete from user where userId in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from attendance where employee_id in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from discuss where employeeID in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from mobilize where employee_id in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from notice where employee_id in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from overtime where id in
        <foreach collection="list" item="item" open="(" separator="," close=");">
            #{item}
        </foreach>
        delete from task where employee_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <!--根据部门id查询该部门员工信息-->
    <resultMap id="resultDepartmentEmployee" type="DepartmentAndEmployee">
        <result property="departmentName" column="department_name"></result>
        <collection property="employeeList" ofType="com.demo.domain.employee.Employee" column="department_id">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="sex" column="sex"/>
            <result property="phone" column="phone"/>
            <result property="position" column="position"/>
        </collection>
    </resultMap>
    <!--搜序框查询-->
    <!--根据员工id查询-->
    <select id="searchDepartmentByID" resultMap="resultDepartmentEmployee" parameterType="String">
        select d.department_name,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id and e.id=#{text}
    </select>
    <!--根据员工姓名查询-->
    <select id="searchDepartmentByName" resultMap="resultDepartmentEmployee" parameterType="String">
        select d.department_name,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id and e.name like CONCAT(CONCAT('%', #{text}), '%')
    </select>
    <!--根据部门名字查询-->
    <select id="searchDepartmentByDname" resultMap="resultDepartmentEmployee" parameterType="String">
        select d.department_name,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id and d.department_name like CONCAT(CONCAT('%', #{text}), '%')

    </select>
    <!--根据员工职务查询-->
    <select id="searchDepartmentByPosition" resultMap="resultDepartmentEmployee" parameterType="String">
        select d.department_name,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id and e.position like CONCAT(CONCAT('%', #{text}), '%')
    </select>

    <!--返回已经存在的部门和其id-->
    <select id="getDepartmentAndId" resultType="DepartmentAndId">
        select d.id,d.department_name as departmentName from department d;
    </select>

    <!--修改员工所在部门和职务-->
    <update id="updateEmployee" parameterType="Mobilize">
        update employee set department_id=#{nowDepartmentId},position=#{nowPosition}
        where id=#{employeeId}
    </update>

    <!--插入员工调动记录-->
    <insert id="addMobilze" parameterType="Mobilize">
        insert into mobilize(employee_id,original_position,original_department_id,now_position,now_department_id,transfer_date,transfer_reason,approver,mobilize_remark)
        values(#{employeeId},#{originalPosition},#{originalDepartmentId},#{nowPosition},#{nowDepartmentId},#{transferDate},#{transferReason},#{approver},#{mobilizeRemark})
    </insert>

    <!--返回查询到的普通员工的id和姓名-->
    <select id="getSimpleEmployee" resultType="java.util.Map">
        select e.name,e.id from user u,employee e where u.flag=0 and u.userId=e.id
    </select>
</mapper>