<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace 这里不是实体类名称，而是映射接口的全路径！！！-->
<mapper namespace="com.demo.dao.AllMapper">


    <!--查询所有员工信息-->
    <select id="findAllEmployee" resultType="Employee">

        select * from employee;

    </select>
    <!--增加新员工信息-->
    <insert id="insertEmployee"  parameterType="EmployeeVo">
        insert into employee(name,sex,birthday,native_place,address,phone,department_id,position,education,school,email,professional,remark)
        values(#{name},#{sex},#{birthday},#{native_place},#{address},#{phone},#{department_id},#{position},#{education},#{school},#{email},#{professional},#{remark})
    </insert>


    <!--根据员工id查询某个员工信息-->
    <select id="queryEmployee" resultType="Employee" parameterType="int">
        
        select * from employee where id=#{id};
        
    </select>

    <!--查询所有部门信息-->
    <select id="queryAllDepartment" resultType="Department">

        select * from department;

    </select>


    <!--根据部门id查询该部门员工信息-->
    <resultMap id="resultDepartmentEmployee" type="DepartmentAndEmployee">
        <result property="departmentName" column="department_name"></result>
        <result property="principal" column="principal"></result>
        <collection property="employeeList" ofType="com.demo.domain.employee.Employee" column="department_id">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="sex" column="sex"/>
            <result property="phone" column="phone"/>
            <result property="position" column="position"/>
        </collection>
    </resultMap>
    <select id="getDepartmentEmployee" resultMap="resultDepartmentEmployee" parameterType="int">
        select d.department_name,d.principal,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id and d.id=#{id}

    </select>
    <select id="getDepartmentEmployeeAll" resultMap="resultDepartmentEmployee">
        select d.department_name,e.id,e.name,e.sex,e.phone,e.position from employee e,department d where d.id=e.department_id
    </select>


    <!--根据员工Id查询能力评估信息-->
    <resultMap id="resultEmployeeEvaluation" type="EmployAndDepartment">
        <result property="name" column="name"></result>
        <collection property="evaluationList" ofType="com.demo.domain.evaluation.Evaluation" column="employee_id">
            <id property="id" column="id"></id>
            <result property="evaluationContent" column="evaluation_content"></result>
            <result property="evaluationTime" column="evaluation_time"></result>
            <result property="evaluationLevel" column="evaluation_level"></result>
            <result property="certificate" column="certificate"></result>
            <result property="remark" column="remark"></result>
        </collection>
    </resultMap>
    <select id="getEmployeeEvaluation" resultMap="resultEmployeeEvaluation" parameterType="int">
        
        select u.name,e.* from employee u,evaluation e where e.employee_id=#{id}

    </select>

    <!--返回员工id姓名，照片，能力等级-->
    <resultMap id="resultEmployeeLevel" type="Employee">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <collection property="evaluationList" ofType="com.demo.domain.evaluation.Evaluation" column="employee_id">
            <result property="evaluationLevel" column="evaluation_level"/>
        </collection>
    </resultMap>

    <select id="findEmployeeLevel" resultMap="resultEmployeeLevel">
        select u.id,u.name,e.evaluation_level from employee u,evaluation e where u.id=e.employee_id
    </select>


    <!--多重左连接，返回的是员工个人资料和考核信息-->
    <select id="getEmployeeAndEvaluation" resultType="java.util.Map" parameterType="int">
        select * from employee e left join evaluation e2 on e.id = e2.employee_id left join department d on e.department_id = d.id where e.id=#{id}
    </select>

    <!--查找用户是否是本公司员工-->
    <select id="checkUser" resultType="Integer">
        select id from employee where phone=#{phone}
    </select>
    <!--查找该用户是否已注册-->
    <select id="checkRegister" resultType="Integer" >
        select userId from user where phone=#{phone}
    </select>

    <!--用户注册-->
    <insert id="addUser" parameterType="UserLogin">
      insert into user(userId, phone, password,flag,picture) VALUES (#{userId},#{phone},#{password},#{flag},#{picture})
    </insert>

    <!--验证用户登录-->
    <select id="getPassword" resultType="String">
        select password from user where phone=#{phone}
    </select>

    <!--登录成功后返回该员工个人信息（id,姓名，电话）-->
    <select id="getLoginInfo" resultType="java.util.Map" parameterType="int">
        select e.*,u.userId,d.department_name,d.principal,u.flag,u.picture from employee e,user u,department d where u.userId=e.id and d.id=e.department_id and e.id=#{id}
    </select>

    <!--添加入职信息后查找默认分配的用户id-->
    <select id="getUserID" parameterType="String" resultType="int">
        select id from employee where phone=#{phone}
    </select>

    <!--修改员工信息-->
    <update id="updateEmployee" parameterType="com.demo.domain.employee.EmployeeVo">
        update employee set
        <if test="name!='' and name!=null" >
            name=#{name},
        </if>
        <if test="sex!='' and sex!=null" >
            sex=#{sex},
        </if>
        <if test="birthday!='' and birthday!=null" >
            birthday=#{birthday},
        </if>
        <if test="native_place!='' and native_place!=null" >
            native_place=#{native_place},
        </if>
        <if test="address!='' and address!=null" >
            address=#{address},
        </if>
        <if test="phone!='' and phone!=null" >
            phone=#{phone},
        </if>
        <if test="department_id!='' and department_id!=null" >
            department_id=#{department_id},
        </if>
        <if test="position!='' and position!=null" >
            position=#{position},
        </if>
        <if test="education!='' and education!=null" >
            education=#{education},
        </if>
        <if test="school!='' and school!=null" >
            school=#{school},
        </if>
        <if test="email!='' and email!=null" >
            email=#{email},
        </if>
        <if test="professional!='' and professional!=null" >
            professional=#{professional},
        </if>
        <if test="remark!='' and remark!=null" >
            remark=#{remark}
        </if>
        where id=#{id}
    </update>

    <!--修改员工权限等级-->
    <update id="updateUserFlag" parameterType="com.demo.domain.employee.EmployeeVo">
        update user set flag=#{flag} where userId=#{id}
    </update>

    <!--删除员工信息-->
    <delete id="deleteEmployee" parameterType="int">
      delete from employee where id=#{id};
      delete from user where userId=#{id}
   </delete>
</mapper>